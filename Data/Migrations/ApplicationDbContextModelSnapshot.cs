// <auto-generated />
using System;
using MicrobiologyLab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MicrobiologyLab.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MicrobiologyLab.Models.Accident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<string>("damages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Accident");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Assesment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraineeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<int>("attitude")
                        .HasColumnType("int");

                    b.Property<int>("communication")
                        .HasColumnType("int");

                    b.Property<int>("leadership")
                        .HasColumnType("int");

                    b.Property<int>("professionalism")
                        .HasColumnType("int");

                    b.Property<int>("quality")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("work_habits")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Assesment");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.AttendanceAssistant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Arrival_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Leaving_Time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceAssistant");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.AttendanceHK", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Hour_1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Hour_2")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceHK");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.AttendanceM2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Arrv_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Leav_Time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceM2");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.AttendancePHD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Arrv_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Leav_Time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendancePHD");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.AttendancePHDSt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Arrv_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Leav_Time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendancePHDSt");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.AttendanceTrainee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Arrv_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Leav_Time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttendanceTrainee");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.BacterialStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bacteria_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Box_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Con_Id")
                        .HasColumnType("int");

                    b.Property<int?>("ConsumedMaterialsCon_Id")
                        .HasColumnType("int");

                    b.Property<int?>("IncomingProductpr_id")
                        .HasColumnType("int");

                    b.Property<int>("Pr_Id")
                        .HasColumnType("int");

                    b.Property<int>("Req_Id")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredMaterialreqmat_id")
                        .HasColumnType("int");

                    b.Property<int>("x")
                        .HasColumnType("int");

                    b.Property<int>("y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsumedMaterialsCon_Id");

                    b.HasIndex("IncomingProductpr_id");

                    b.HasIndex("RequiredMaterialreqmat_id");

                    b.ToTable("BacterialStock");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Biowaste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Box_num")
                        .HasColumnType("int");

                    b.Property<int>("Comp_Id")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyComp_Id")
                        .HasColumnType("int");

                    b.Property<int>("weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyComp_Id");

                    b.ToTable("Biowaste");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.BorrowPermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Borr_Object")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pro_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Return_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowPermission");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Collaboration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Col_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Compounds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Test")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("institute")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("proj_Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Collaboration");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Company", b =>
                {
                    b.Property<int>("Comp_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Add")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("num")
                        .HasColumnType("bigint");

                    b.HasKey("Comp_Id");

                    b.HasIndex("UserId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.ConsumablesInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fur_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IncomingProductpr_id")
                        .HasColumnType("int");

                    b.Property<int>("Pr_Id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_Refrig")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_cell")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_meeting")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_micro")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_mol")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_myco")
                        .HasColumnType("int");

                    b.Property<int>("Quantity_storage")
                        .HasColumnType("int");

                    b.Property<int>("Req_Id")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredMaterialreqmat_id")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncomingProductpr_id");

                    b.HasIndex("RequiredMaterialreqmat_id");

                    b.HasIndex("UserId");

                    b.ToTable("ConsumablesInventory");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.ConsumedMaterials", b =>
                {
                    b.Property<int>("Con_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Exp_Id")
                        .HasColumnType("int");

                    b.Property<int?>("ExperimentExp_Id")
                        .HasColumnType("int");

                    b.Property<int>("Proj_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Projectproj_id")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Con_Id");

                    b.HasIndex("ExperimentExp_Id");

                    b.HasIndex("Projectproj_id");

                    b.ToTable("ConsumedMaterials");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Experiment", b =>
                {
                    b.Property<int>("Exp_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Desc")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Project")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Superv")
                        .HasColumnType("int");

                    b.Property<int?>("biowasteId")
                        .HasColumnType("int");

                    b.HasKey("Exp_Id");

                    b.HasIndex("biowasteId");

                    b.ToTable("Experiment");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.FreeForm", b =>
                {
                    b.Property<int>("ff_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.Property<int>("acceptance")
                        .HasColumnType("int");

                    b.HasKey("ff_Id");

                    b.HasIndex("UserId");

                    b.ToTable("FreeForm");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Freezer_20", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Box_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Box_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Con_Id")
                        .HasColumnType("int");

                    b.Property<string>("Cons")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConsumedMaterialsCon_Id")
                        .HasColumnType("int");

                    b.Property<int?>("IncomingProductpr_id")
                        .HasColumnType("int");

                    b.Property<string>("Lev_Side")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level_num")
                        .HasColumnType("int");

                    b.Property<int>("Pr_Id")
                        .HasColumnType("int");

                    b.Property<int>("Req_Id")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredMaterialreqmat_id")
                        .HasColumnType("int");

                    b.Property<string>("Side")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsumedMaterialsCon_Id");

                    b.HasIndex("IncomingProductpr_id");

                    b.HasIndex("RequiredMaterialreqmat_id");

                    b.ToTable("Freezer_20");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Freezer_80", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Box_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Box_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Col7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Con_Id")
                        .HasColumnType("int");

                    b.Property<int?>("ConsumedMaterialsCon_Id")
                        .HasColumnType("int");

                    b.Property<int?>("IncomingProductpr_id")
                        .HasColumnType("int");

                    b.Property<string>("Lev_Side")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level_num")
                        .HasColumnType("int");

                    b.Property<int>("Pr_Id")
                        .HasColumnType("int");

                    b.Property<int>("Req_Id")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredMaterialreqmat_id")
                        .HasColumnType("int");

                    b.Property<string>("Side")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsumedMaterialsCon_Id");

                    b.HasIndex("IncomingProductpr_id");

                    b.HasIndex("RequiredMaterialreqmat_id");

                    b.ToTable("Freezer_80");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.FurnituresInventory", b =>
                {
                    b.Property<int>("fid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("furniture_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("pr_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity_cell")
                        .HasColumnType("int");

                    b.Property<int>("quantity_meeting")
                        .HasColumnType("int");

                    b.Property<int>("quantity_micro")
                        .HasColumnType("int");

                    b.Property<int>("quantity_mol")
                        .HasColumnType("int");

                    b.Property<int>("quantity_myco")
                        .HasColumnType("int");

                    b.Property<int>("quantity_refrig")
                        .HasColumnType("int");

                    b.Property<int>("quantity_storage")
                        .HasColumnType("int");

                    b.Property<int>("reqmat_id")
                        .HasColumnType("int");

                    b.Property<int>("total")
                        .HasColumnType("int");

                    b.HasKey("fid");

                    b.HasIndex("id");

                    b.HasIndex("pr_id");

                    b.HasIndex("reqmat_id");

                    b.ToTable("FurnituresInventory");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.IncomingProduct", b =>
                {
                    b.Property<int>("pr_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("additionnalNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("arrdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("comp_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("exdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<float>("weight")
                        .HasColumnType("real");

                    b.HasKey("pr_id");

                    b.HasIndex("comp_id");

                    b.HasIndex("id");

                    b.ToTable("IncomingProduct");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.InternshipRequest", b =>
                {
                    b.Property<int>("intr_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fundingDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("phone_number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("student_id")
                        .HasColumnType("int");

                    b.HasKey("intr_id");

                    b.HasIndex("id");

                    b.ToTable("InternshipRequest");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.ItemsInventory", b =>
                {
                    b.Property<int>("iid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("item_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pr_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity_cell")
                        .HasColumnType("int");

                    b.Property<int>("quantity_meeting")
                        .HasColumnType("int");

                    b.Property<int>("quantity_micro")
                        .HasColumnType("int");

                    b.Property<int>("quantity_mol")
                        .HasColumnType("int");

                    b.Property<int>("quantity_myco")
                        .HasColumnType("int");

                    b.Property<int>("quantity_refrig")
                        .HasColumnType("int");

                    b.Property<int>("quantity_storage")
                        .HasColumnType("int");

                    b.Property<int>("reqmat_id")
                        .HasColumnType("int");

                    b.Property<int>("total")
                        .HasColumnType("int");

                    b.HasKey("iid");

                    b.HasIndex("id");

                    b.HasIndex("pr_id");

                    b.HasIndex("reqmat_id");

                    b.ToTable("ItemsInventory");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.MachinesInventory", b =>
                {
                    b.Property<int>("mid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("furniture_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("incomingProductpr_id")
                        .HasColumnType("int");

                    b.Property<int?>("pr_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity_cell")
                        .HasColumnType("int");

                    b.Property<int>("quantity_meeting")
                        .HasColumnType("int");

                    b.Property<int>("quantity_micro")
                        .HasColumnType("int");

                    b.Property<int>("quantity_mol")
                        .HasColumnType("int");

                    b.Property<int>("quantity_myco")
                        .HasColumnType("int");

                    b.Property<int>("quantity_refrig")
                        .HasColumnType("int");

                    b.Property<int>("quantity_storage")
                        .HasColumnType("int");

                    b.Property<int>("total")
                        .HasColumnType("int");

                    b.HasKey("mid");

                    b.HasIndex("UserId");

                    b.HasIndex("incomingProductpr_id");

                    b.ToTable("MachinesInventory");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.MachinesReservation", b =>
                {
                    b.Property<int>("machResId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ResOrNot")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ex_id")
                        .HasColumnType("int");

                    b.Property<string>("machine_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("machResId");

                    b.HasIndex("ex_id");

                    b.ToTable("MachinesReservation");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.MachinesTC", b =>
                {
                    b.Property<int>("mtcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConsumablesInventoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemsInventoryiid")
                        .HasColumnType("int");

                    b.Property<int?>("MachinesInventorymid")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mtcId");

                    b.HasIndex("ConsumablesInventoryId");

                    b.HasIndex("ItemsInventoryiid");

                    b.HasIndex("MachinesInventorymid");

                    b.ToTable("MachinesTC");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.MeetingPresence", b =>
                {
                    b.Property<int>("mpre_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("mrrId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mpre_id");

                    b.HasIndex("mrrId");

                    b.ToTable("MeetingPresence");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.MeetingRR", b =>
                {
                    b.Property<int>("mrrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MeetingRRmrrId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mrrId");

                    b.HasIndex("MeetingRRmrrId");

                    b.HasIndex("id");

                    b.ToTable("MeetingRR");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.MembershipRequest", b =>
                {
                    b.Property<int>("mr_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("signature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mr_id");

                    b.HasIndex("id");

                    b.ToTable("MembershipRequest");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.OpeningAndClosing", b =>
                {
                    b.Property<int>("oc_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IncomingProductpr_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("closing_time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("opening_time")
                        .HasColumnType("datetime2");

                    b.HasKey("oc_id");

                    b.HasIndex("IncomingProductpr_id");

                    b.ToTable("OpeningAndClosing");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Order", b =>
                {
                    b.Property<int>("ol_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("comp_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("expiry_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("funding_duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("project_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("refrigerationOrNot")
                        .HasColumnType("int");

                    b.Property<string>("specifity_notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supervisor_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unit_price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ol_id");

                    b.HasIndex("comp_id");

                    b.HasIndex("id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.PrintingPermission", b =>
                {
                    b.Property<int>("printing_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("coloredOrNot")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("page_number")
                        .HasColumnType("int");

                    b.HasKey("printing_id");

                    b.HasIndex("id");

                    b.ToTable("PrintingPermission");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Project", b =>
                {
                    b.Property<int>("proj_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("congress")
                        .HasColumnType("int");

                    b.Property<int>("consumables")
                        .HasColumnType("int");

                    b.Property<int>("fieldFees")
                        .HasColumnType("int");

                    b.Property<string>("from")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fund_amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("funding_duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("funding_organism")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("machinesAndEquipements")
                        .HasColumnType("int");

                    b.Property<int>("others")
                        .HasColumnType("int");

                    b.Property<int>("publicationAndPatentFees")
                        .HasColumnType("int");

                    b.Property<string>("reasearchAssistantFees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("to")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("proj_id");

                    b.HasIndex("id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Project_Collaboration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CollaborationId")
                        .HasColumnType("int");

                    b.Property<int?>("Projectproj_id")
                        .HasColumnType("int");

                    b.Property<int>("collaboration_id")
                        .HasColumnType("int");

                    b.Property<int>("project_id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CollaborationId");

                    b.HasIndex("Projectproj_id");

                    b.ToTable("Project_Collaboration");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Project_Researcher", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Projectproj_id")
                        .HasColumnType("int");

                    b.Property<int?>("Researcherrid")
                        .HasColumnType("int");

                    b.Property<int>("project_id")
                        .HasColumnType("int");

                    b.Property<int>("researcher_id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Projectproj_id");

                    b.HasIndex("Researcherrid");

                    b.ToTable("Project_Researcher");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.RequiredMaterial", b =>
                {
                    b.Property<int>("reqmat_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ConsumedMaterialsCon_Id")
                        .HasColumnType("int");

                    b.Property<int>("ex_id")
                        .HasColumnType("int");

                    b.Property<string>("name1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("reqmat_id");

                    b.HasIndex("ConsumedMaterialsCon_Id");

                    b.HasIndex("ex_id");

                    b.ToTable("RequiredMaterial");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Researcher", b =>
                {
                    b.Property<int>("rid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("reseacher_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("rid");

                    b.ToTable("Researcher");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Rotation", b =>
                {
                    b.Property<int>("rot_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("cafeteriaFees")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("entrancePermission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("eventsAndCeremonies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<string>("inventory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("month")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("orderingConsumables")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("photosAndDemandLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("stockUpdates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("rot_id");

                    b.HasIndex("id");

                    b.ToTable("Rotation");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.TestingAndCalibration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("mtc_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("next_check")
                        .HasColumnType("datetime2");

                    b.Property<string>("student_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("mtc_id");

                    b.HasIndex("user_id");

                    b.ToTable("TestingAndCalibration");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.TrainingPreRegistration", b =>
                {
                    b.Property<int>("tpr_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("speciality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.Property<string>("year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tpr_id");

                    b.HasIndex("user_id");

                    b.ToTable("TrainingPreRegistration");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.User_OpeningClosing", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OpeningAndClosingoc_id")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("openingclosing_id")
                        .HasColumnType("int");

                    b.Property<int>("project_id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OpeningAndClosingoc_id");

                    b.HasIndex("UserId");

                    b.ToTable("User_OpeningClosing");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.WorkPermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("schedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.Property<string>("work")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("user_id");

                    b.ToTable("WorkPermission");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Accident", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("Accidents")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Assesment", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("Assesments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.AttendanceAssistant", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("AssistanceAttendances")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.AttendanceHK", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("HKAttendances")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.AttendanceM2", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("M2Attendances")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.AttendancePHD", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("PHDAttendances")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.AttendancePHDSt", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("PHDStAttendances")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.AttendanceTrainee", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("TraineeAttendances")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.BacterialStock", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.ConsumedMaterials", "ConsumedMaterials")
                        .WithMany()
                        .HasForeignKey("ConsumedMaterialsCon_Id");

                    b.HasOne("MicrobiologyLab.Models.IncomingProduct", "IncomingProduct")
                        .WithMany("Bacterias")
                        .HasForeignKey("IncomingProductpr_id");

                    b.HasOne("MicrobiologyLab.Models.RequiredMaterial", "RequiredMaterial")
                        .WithMany("Bacterias")
                        .HasForeignKey("RequiredMaterialreqmat_id");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Biowaste", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.Company", "Company")
                        .WithMany("Biowastes")
                        .HasForeignKey("CompanyComp_Id");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.BorrowPermission", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("BorrowPermissions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Collaboration", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("Collaborations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Company", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", null)
                        .WithMany("Companies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.ConsumablesInventory", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.IncomingProduct", "IncomingProduct")
                        .WithMany("Consumables")
                        .HasForeignKey("IncomingProductpr_id");

                    b.HasOne("MicrobiologyLab.Models.RequiredMaterial", "RequiredMaterial")
                        .WithMany("Consumables")
                        .HasForeignKey("RequiredMaterialreqmat_id");

                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("Consumables")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.ConsumedMaterials", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.Experiment", "Experiment")
                        .WithMany("ConsumedMaterials")
                        .HasForeignKey("ExperimentExp_Id");

                    b.HasOne("MicrobiologyLab.Models.Project", "Project")
                        .WithMany("ConsumedMaterials")
                        .HasForeignKey("Projectproj_id");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Experiment", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.Biowaste", "biowaste")
                        .WithMany("Experiments")
                        .HasForeignKey("biowasteId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.FreeForm", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("FreeForms")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Freezer_20", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.ConsumedMaterials", "ConsumedMaterials")
                        .WithMany()
                        .HasForeignKey("ConsumedMaterialsCon_Id");

                    b.HasOne("MicrobiologyLab.Models.IncomingProduct", "IncomingProduct")
                        .WithMany("Freezer_20s")
                        .HasForeignKey("IncomingProductpr_id");

                    b.HasOne("MicrobiologyLab.Models.RequiredMaterial", "RequiredMaterial")
                        .WithMany("Freezer_20s")
                        .HasForeignKey("RequiredMaterialreqmat_id");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Freezer_80", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.ConsumedMaterials", "ConsumedMaterials")
                        .WithMany()
                        .HasForeignKey("ConsumedMaterialsCon_Id");

                    b.HasOne("MicrobiologyLab.Models.IncomingProduct", "IncomingProduct")
                        .WithMany("Freezer_80s")
                        .HasForeignKey("IncomingProductpr_id");

                    b.HasOne("MicrobiologyLab.Models.RequiredMaterial", "RequiredMaterial")
                        .WithMany("Freezer_80s")
                        .HasForeignKey("RequiredMaterialreqmat_id");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.FurnituresInventory", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("Furnitures")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MicrobiologyLab.Models.IncomingProduct", "incomingProduct")
                        .WithMany("Furnitures")
                        .HasForeignKey("pr_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MicrobiologyLab.Models.RequiredMaterial", "requiredMaterial")
                        .WithMany("Furnitures")
                        .HasForeignKey("reqmat_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.IncomingProduct", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.Company", "company")
                        .WithMany("IncomingProducts")
                        .HasForeignKey("comp_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("IncomingProducts")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.InternshipRequest", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("InternshipRequests")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.ItemsInventory", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("Items")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MicrobiologyLab.Models.IncomingProduct", "incomingProduct")
                        .WithMany("Items")
                        .HasForeignKey("pr_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MicrobiologyLab.Models.RequiredMaterial", "requiredMaterial")
                        .WithMany("Items")
                        .HasForeignKey("reqmat_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.MachinesInventory", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("Machines")
                        .HasForeignKey("UserId");

                    b.HasOne("MicrobiologyLab.Models.IncomingProduct", "incomingProduct")
                        .WithMany("Machines")
                        .HasForeignKey("incomingProductpr_id");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.MachinesReservation", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.Experiment", "Experiment")
                        .WithMany("MachinesReservations")
                        .HasForeignKey("ex_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.MachinesTC", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.ConsumablesInventory", null)
                        .WithMany("MachinesToTestAndCalibrate")
                        .HasForeignKey("ConsumablesInventoryId");

                    b.HasOne("MicrobiologyLab.Models.ItemsInventory", null)
                        .WithMany("MachinesToTestAndCalibrate")
                        .HasForeignKey("ItemsInventoryiid");

                    b.HasOne("MicrobiologyLab.Models.MachinesInventory", null)
                        .WithMany("MachinesToTestAndCalibrate")
                        .HasForeignKey("MachinesInventorymid");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.MeetingPresence", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.MeetingRR", "meetingRR")
                        .WithMany()
                        .HasForeignKey("mrrId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.MeetingRR", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.MeetingRR", null)
                        .WithMany("MeetingRRs")
                        .HasForeignKey("MeetingRRmrrId");

                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("MeetingRoomReservations")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.MembershipRequest", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("MembershipRequests")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.OpeningAndClosing", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.IncomingProduct", null)
                        .WithMany("OpeningAndClosings")
                        .HasForeignKey("IncomingProductpr_id");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Order", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.Company", "company")
                        .WithMany("Orders")
                        .HasForeignKey("comp_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("Orders")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.PrintingPermission", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("PrintingPermissions")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Project", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("Projects")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Project_Collaboration", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.Collaboration", "Collaboration")
                        .WithMany("Project_Collaborations")
                        .HasForeignKey("CollaborationId");

                    b.HasOne("MicrobiologyLab.Models.Project", "Project")
                        .WithMany("Project_Collaborations")
                        .HasForeignKey("Projectproj_id");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Project_Researcher", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.Project", "Project")
                        .WithMany("Project_Researchers")
                        .HasForeignKey("Projectproj_id");

                    b.HasOne("MicrobiologyLab.Models.Researcher", "Researcher")
                        .WithMany("Project_Researchers")
                        .HasForeignKey("Researcherrid");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.RequiredMaterial", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.ConsumedMaterials", null)
                        .WithMany("RequiredMaterials")
                        .HasForeignKey("ConsumedMaterialsCon_Id");

                    b.HasOne("MicrobiologyLab.Models.Experiment", "Experiment")
                        .WithMany("RequiredMaterials")
                        .HasForeignKey("ex_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.Rotation", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("Rotations")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.TestingAndCalibration", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.MachinesTC", "machinetc")
                        .WithMany("TestingAndCalibrations")
                        .HasForeignKey("mtc_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("TestingAndCalibrations")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.TrainingPreRegistration", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("TrainingPreRegistrations")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MicrobiologyLab.Models.User_OpeningClosing", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.OpeningAndClosing", "OpeningAndClosing")
                        .WithMany("User_OpeningClosings")
                        .HasForeignKey("OpeningAndClosingoc_id");

                    b.HasOne("MicrobiologyLab.Models.User", "User")
                        .WithMany("User_OpeningClosings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MicrobiologyLab.Models.WorkPermission", b =>
                {
                    b.HasOne("MicrobiologyLab.Models.User", "user")
                        .WithMany("WorkPermissions")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
